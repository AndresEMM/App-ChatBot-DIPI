{"version":3,"sources":["ActionProvider.js","MessageParser.js","components/LearningOptions/LearningOptions.jsx","components/LinkList/LinkList.jsx","config.js","App.js","reportWebVitals.js","index.js"],"names":["ActionProvider","createChatBotMessage","setStateFunc","handleJavascriptList","message","widget","updateChatbotState","handleDitiInfo","handleDitiFeels","handleDitiFood","this","setState","greetingMessage","prevState","messages","MessageParser","actionProvider","lowerCaseMessage","toLowerCase","includes","greet","saludo","quieneres","emociones","comida","LearningOptions","props","optionsMarkup","text","handler","id","map","option","className","onClick","LinkList","console","log","linkMarkup","options","link","href","url","target","rel","config","botName","lang","initialMessages","customStyles","botMessageBox","backgroundColor","chatButton","widgets","widgetName","widgetFunc","App","messageParser","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.451d343d.chunk.js","sourcesContent":["// ActionProvider starter code\r\nclass ActionProvider {\r\n  constructor(createChatBotMessage, setStateFunc) {\r\n    this.createChatBotMessage = createChatBotMessage;\r\n    this.setState = setStateFunc;\r\n  }\r\n  \r\n  greet() {\r\n    const greetingMessage = this.createChatBotMessage(\"Hi, friend.\")\r\n    this.updateChatbotState(greetingMessage)\r\n  }\r\n\r\n  saludo() {\r\n    const greetingMessage = this.createChatBotMessage(\"Hola, bro.\")\r\n    this.updateChatbotState(greetingMessage)\r\n  }\r\n\r\n  quieneres(){\r\n    const greetingMessage = this.createChatBotMessage(\"Soy DITI, un bot creado por AEMM (Iniciales del humano que me creo), hasta donde se soy un pasatiempo, pero a lo mejor y me siguen optimizando :´D\")\r\n    this.updateChatbotState(greetingMessage)\r\n  }\r\n\r\n  emociones(){\r\n    const greetingMessage = this.createChatBotMessage(\"No realmente, solo unos y ceros '01101010 01100001 01101010 01100001 01101010 01100001 00100000 01110100 01100101 00100000 01101000 01101001 01100011 01100101 00100000 01100010 01110101 01110011 01100011 01100001 01110010 00100000 00111010 01010000' (Si es texto en binario :0).\")\r\n    this.updateChatbotState(greetingMessage)\r\n  }\r\n\r\n  comida(){\r\n    const greetingMessage = this.createChatBotMessage(\"No puedo 'comer' algo como tal, mi alimento serían los DATOS, me gusta el sabor del conocimiento.\")\r\n    this.updateChatbotState(greetingMessage)\r\n  }\r\n\r\n  handleJavascriptList = () => {\r\n    const message = this.createChatBotMessage(\r\n      \"Fantástico, tengo un poco de información al respecto de Javascript:\",\r\n      {\r\n        widget: \"javascriptLinks\",\r\n      }\r\n    );\r\n\r\n    this.updateChatbotState(message);\r\n  };\r\n\r\n  handleDitiInfo = () => {\r\n    const message = this.createChatBotMessage(\r\n      \"Soy DITI, un bot creado por AEMM (Iniciales del humano que me creo), hasta donde se soy un pasatiempo, pero a lo mejor y me siguen optimizando :´D\"\r\n    );\r\n\r\n    this.updateChatbotState(message);\r\n  };\r\n\r\n  handleDitiFeels = () => {\r\n    const message = this.createChatBotMessage(\r\n      \"No realmente, solo unos y ceros '01101010 01100001 01101010 01100001 01101010 01100001 00100000 01110100 01100101 00100000 01101000 01101001 01100011 01100101 00100000 01100010 01110101 01110011 01100011 01100001 01110010 00100000 00111010 01010000' (Si es texto en binario :0).\"\r\n    );\r\n\r\n    this.updateChatbotState(message);\r\n  };\r\n\r\n  handleDitiFood = () => {\r\n    const message = this.createChatBotMessage(\r\n      \"No puedo 'comer' algo como tal, mi alimento serían los DATOS, me gusta el sabor del conocimiento.\"\r\n    );\r\n\r\n    this.updateChatbotState(message);\r\n  };\r\n  \r\n  updateChatbotState(message) {\r\n \r\n// NOTE: This function is set in the constructor, and is passed in      \r\n// from the top level Chatbot component. The setState function here     \r\n// actually manipulates the top level state of the Chatbot, so it's     \r\n// important that we make sure that we preserve the previous state.\r\n \r\n    \r\n   this.setState(prevState => ({\r\n    \t...prevState, messages: [...prevState.messages, message]\r\n    }))\r\n  }\r\n}\r\n \r\nexport default ActionProvider;","\r\n// MessageParser starter code\r\nclass MessageParser {\r\n  constructor(actionProvider) {\r\n    this.actionProvider = actionProvider;\r\n  }\r\n\r\n  parse(message) {\r\n    const lowerCaseMessage = message.toLowerCase()\r\n    \r\n    if (lowerCaseMessage.includes(\"hello\")) {\r\n      this.actionProvider.greet()\r\n    }\r\n\r\n    if (lowerCaseMessage.includes(\"hola\")) {\r\n      this.actionProvider.saludo()\r\n    }\r\n\r\n    if (lowerCaseMessage.includes(\"quien eres?\")) {\r\n      this.actionProvider.quieneres()\r\n    }\r\n\r\n    if (lowerCaseMessage.includes(\"tienes emociones?\")) {\r\n      this.actionProvider.emociones()\r\n    }\r\n\r\n    if (lowerCaseMessage.includes(\"que comida te gusta?\")) {\r\n      this.actionProvider.comida()\r\n    }\r\n\r\n    if (lowerCaseMessage.includes(\"javascript\")) {\r\n      this.actionProvider.handleJavascriptList();\r\n    }\r\n  }\r\n}\r\n  \r\nexport default MessageParser;","import React from \"react\";\r\n\r\nimport \"./LearningOptions.css\";\r\n\r\nconst LearningOptions = (props) => {\r\n  const options = [\r\n    {\r\n      text: \"Javascript\",\r\n      handler: props.actionProvider.handleJavascriptList,\r\n      id: 1,\r\n    },\r\n    { text: \"DITI Info\", handler: props.actionProvider.handleDitiInfo, id: 2 },\r\n    { text: \"tienes emociones?\", handler: props.actionProvider.handleDitiFeels, id: 3 },\r\n    { text: \"que comida te gusta?\", handler: props.actionProvider.handleDitiFood, id: 4 },\r\n    /*{ text: \"APIs\", handler: () => {}, id: 3 },\r\n    { text: \"Security\", handler: () => {}, id: 4 },\r\n    { text: \"Interview prep\", handler: () => {}, id: 5 },*/\r\n  ];\r\n\r\n  const optionsMarkup = options.map((option) => (\r\n    <button\r\n      className=\"learning-option-button\"\r\n      key={option.id}\r\n      onClick={option.handler}\r\n    >\r\n      {option.text}\r\n    </button>\r\n  ));\r\n\r\n  return <div className=\"learning-options-container\">{optionsMarkup}</div>;\r\n};\r\n\r\nexport default LearningOptions;","import React from \"react\";\r\n\r\nimport \"./LinkList.css\";\r\n\r\nconst LinkList = (props) => {\r\n  console.log(props);\r\n  const linkMarkup = props.options.map((link) => (\r\n    <li key={link.id} className=\"link-list-item\">\r\n      <a\r\n        href={link.url}\r\n        target=\"_blank\"\r\n        rel=\"noopener noreferrer\"\r\n        className=\"link-list-item-url\"\r\n      >\r\n        {link.text}\r\n      </a>\r\n    </li>\r\n  ));\r\n\r\n  return <ul className=\"link-list\">{linkMarkup}</ul>;\r\n};\r\n\r\nexport default LinkList;","import React from \"react\";\r\nimport { createChatBotMessage } from \"react-chatbot-kit\";\r\n\r\nimport LearningOptions from \"./components/LearningOptions/LearningOptions\";\r\nimport LinkList from \"./components/LinkList/LinkList\";\r\n\r\nconst botName = \"DIPI\"\r\n\r\nconst config = {\r\n  botName: botName,\r\n  lang: \"no\",\r\n  initialMessages: [\r\n      createChatBotMessage(\"Hola soy DIPI, una APP de Chatbot, basicamente un robot de dialogo.\", {\r\n        widget: \"learningOptions\",\r\n      }),\r\n    ],\r\n  customStyles: {\r\n    botMessageBox: {\r\n      backgroundColor: \"#376B7E\",\r\n    },\r\n    chatButton: {\r\n      backgroundColor: \"#376B7E\",\r\n    },\r\n  },\r\n widgets: [\r\n     {\r\n     \twidgetName: \"learningOptions\",\r\n    \twidgetFunc: (props) => <LearningOptions {...props} />,\r\n     },\r\n     {\r\n      widgetName: \"javascriptLinks\",\r\n      widgetFunc: (props) => <LinkList {...props} />,\r\n      props: {\r\n        options: [\r\n          {\r\n            text: \"Introduction to JS\",\r\n            url:\r\n              \"https://www.freecodecamp.org/learn/javascript-algorithms-and-data-structures/basic-javascript/\",\r\n            id: 1,\r\n          },\r\n          {\r\n            text: \"Mozilla JS Guide\",\r\n            url:\r\n              \"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide\",\r\n            id: 2,\r\n          },\r\n          {\r\n            text: \"Frontend Masters\",\r\n            url: \"https://frontendmasters.com\",\r\n            id: 3,\r\n          },\r\n        ],\r\n      },\r\n    },\r\n ],\r\n}\r\n\r\nexport default config","import React from 'react';\nimport Chatbot from 'react-chatbot-kit'\nimport './App.css';\n\nimport ActionProvider from './ActionProvider';\nimport MessageParser from './MessageParser';\nimport config from './config';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Chatbot config={config} actionProvider={ActionProvider} messageParser={MessageParser} />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}